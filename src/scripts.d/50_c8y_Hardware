#!/bin/sh
set -e

EXIT_OK=0
EXIT_NOT_SUPPORTED=2

hardware_info_container() {
    #
    # Allow container users to override these values
    # by setting environment variables
    #
    CONTAINER_ENGINE="${CONTAINER_ENGINE:-}"
    if [ -z "$CONTAINER_ENGINE" ]; then
        if [ -f /.dockerenv ]; then
            CONTAINER_ENGINE="docker"
        elif [ -f /run/.containerenv ]; then
            CONTAINER_ENGINE="podman"
        fi
    fi
    if [ -z "$CONTAINER_ENGINE" ]; then
        CONTAINER_ENGINE="container"
    fi

    MODEL="${MODEL:-}"
    REVISION="${REVISION:-}"
    SERIAL="${SERIAL:-}"

    if [ -f /etc/os-release ]; then
        # shellcheck disable=SC1091
        . /etc/os-release
        echo "Using information from /etc/os-release" >&2

        if [ -z "$MODEL" ] && [ -n "${NAME:-}" ]; then
            MODEL="${CONTAINER_ENGINE} ${NAME}"
        fi

        if [ -z "$REVISION" ] && [ -n "${VERSION_ID:-}" ]; then
            REVISION="${VERSION_ID}"
        fi
    fi

    # Use the hostname as the serial, though this might change over time
    if [ -z "$SERIAL" ]; then
        if command -V hostname >/dev/null 2>&1; then
            SERIAL=$(hostname)
        elif [ -n "$HOSTNAME" ]; then
            SERIAL="$HOSTNAME"
        elif [ -n "$HOST" ]; then
            SERIAL="$HOST"
        fi
    fi

    # Set defaults
    if [ -z "$MODEL" ]; then
        MODEL="$CONTAINER_ENGINE"
    fi

    if [ -z "$REVISION" ]; then
        REVISION="0.0.0"
    fi

    if [ -z "$SERIAL" ]; then
        SERIAL="unknown"
    fi

    echo "model=\"$MODEL\""
    echo "revision=\"$REVISION\""
    echo "serialNumber=\"$SERIAL\""
}

get_mac_address() {
    SCN=/sys/class/net
    min=65535
    arphrd_ether=1
    ifdev=

    # find iface with lowest ifindex, skip non ARPHRD_ETHER types (lo, sit ...)
    for dev in "$SCN"/*; do
        if [ ! -f "$dev/type" ]; then
            continue
        fi

        iftype=$(cat "$dev/type")
        if [ "$iftype" -ne $arphrd_ether ]; then
            continue
        fi

        # Skip dummy interfaces
        if echo "$dev" | grep -q "$SCN/dummy" 2>/dev/null; then
            continue
        fi

        idx=$(cat "$dev/ifindex")
        if [ "$idx" -lt "$min" ]; then
            min=$idx
            ifdev=$dev
        fi
    done

    if [ -z "$ifdev" ]; then
        echo "no suitable interfaces found" >&2
        exit 1
    else
        echo "using interface $ifdev" >&2
        # grab MAC address
        cat "$ifdev/address"
    fi
}

hardware_info_device() {
    MODEL=$(grep Model /proc/cpuinfo | cut -d: -f2- | xargs)
    HARDWARE=$(grep "^Hardware" /proc/cpuinfo | cut -d: -f2- | xargs)
    REVISION=$(grep "^Revision" /proc/cpuinfo | cut -d: -f2- | xargs)
    SERIAL=$(grep "^Serial" /proc/cpuinfo | cut -d: -f2- | xargs)

    if [ -z "$MODEL" ]; then
        if command -V lshw >/dev/null 2>&1; then
            # Example product: Sipeed Lichee RV Dock, licheerv
            MODEL=$(lshw -C system 2>/dev/null | grep product | cut -d: -f2- | xargs)
        fi
    fi

    if [ -z "$SERIAL" ]; then
        # TODO: not all cpus have a serial number /proc/cpuinfo
        # Fallback to using the mac address
        SERIAL="$(get_mac_address 2>/dev/null)"
    fi

    # Join hardware and revision by "-" but any one of them can be empty (so prevent output like "-abcdef")
    # by using xargs to trim leading/trailing space, and then replacing any spaces with '-' using tr
    NORMALIZED_REVISION=$(echo "${HARDWARE} ${REVISION}" | xargs | tr ' ' '-')

    echo "model=\"$MODEL\""
    echo "revision=\"$NORMALIZED_REVISION\""
    echo "serialNumber=\"$SERIAL\""
}

# FIXME: Workaround for an issue when publishing a message before the system clock has been synchronized
# results in the message not being sent to the cloud
# By adding the sysClockSync value, it will bypass the tedge-mapper-c8y diff check
if command -V timedatectl >/dev/null 2>&1; then
    system_time_insync=$(timedatectl | grep "System clock synchronized" | cut -d: -f2 | xargs)
    echo "sysClockSync=\"$system_time_insync\""
fi

# Check if running in a container or not (note, this is just a rough check)
if [ -f /.dockerenv ] || [ -f /run/.containerenv ]; then
    hardware_info_container
elif [ -f /proc/cpuinfo ]; then
    hardware_info_device
else
    echo "Could not read hardware information" >&2
    exit "$EXIT_NOT_SUPPORTED"
fi

exit "$EXIT_OK"
